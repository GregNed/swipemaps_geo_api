---
openapi: "3.0.3"
info:
  version: "1.0.0"
  title: Geo
  description: Dango Geo API
  contact:
    name: Grigory Nedaev
    email: nedaevg@gmail.com
servers:
  - url: "http://89.108.70.197:5000"
    description: Development server
paths:
  "/":
    get:
      operationId: app.routes.healthcheck
      summary: Health Check
      description: Returns 200 and status OK as JSON if the API is working
      responses:
        200:
          description: The API is up and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  server:
                    $ref: "#/components/schemas/ServiceStateString"
                  postgres:
                    $ref: "#/components/schemas/ServiceStateString"
                  ors:
                    $ref: "#/components/schemas/ServiceStateString"
                  # pelias:
                  #   $ref: "#/components/schemas/ServiceStateString"
  "/areas":
    get:
      operationId: app.routes.get_areas
      summary: Supported Areas
      description: Get all geographical areas supported by Dango
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  polygons:
                    type: object
                    $ref: "#/components/schemas/FeatureCollection"
                  points:
                    type: object
                    $ref: "#/components/schemas/FeatureCollection"
  "/stops":
    get:
      parameters:
        - name: bbox
          in: query
          schema:
            type: string
      operationId: app.routes.get_stops
      summary: Stops
      description: Get public transport stops for the specified area, or overall, if no area is specified
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureCollection"
  "/distance":
    post:
      operationId: app.routes.distance
      summary: Distance
      description: Calculate distance between two geograpical coordinates on a sphere
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                positions:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    $ref: "#/components/schemas/Position"
              required: [positions]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
  "/routes":
    post:
      operationId: app.routes.post_route
      summary: Routing
      description: |
        Build a car or walking route through the specified locations, and save it to the database.
        If `alternatives = true` (default), at most {{config.ORS_MAX_ALTERNATIVES}} alternatives are returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                positions:
                  type: array
                  minItems: 2
                  items:
                    $ref: "#/components/schemas/Position"
                profile:
                  description: "Transportation mode: either car or walking"
                  type: string
                  enum:
                    - "driving-car"
                    - "foot-walking"
                user_id:
                  $ref: "#/components/schemas/UUID"
                make_route:
                  description: In some cases no route is actually needed, the goal is just to save to endpoints
                  type: boolean
                  default: true
                alternatives:
                  description: Whether to suggest alternative routes
                  type: boolean
                  default: true
                handles:
                  description: Whether to return a mid-point for each route so the user could drag it to re-route
                  type: boolean
                  default: true
              required:
                - profile
                - user_id
                - positions
              additionalProperties: false
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    oneOf:
                      - $ref: "#/components/schemas/FeatureCollection"
                      - type: array
                        maxItems: 0
                  prepared_routes:
                    oneOf:
                      - $ref: "#/components/schemas/FeatureCollection"
                      - type: array
                        maxItems: 0
                  handles:
                    oneOf:
                      - $ref: "#/components/schemas/FeatureCollection"
                      - type: array
                        maxItems: 0
  "/routes/{route_id}":
    parameters:
      - $ref: "#/components/parameters/routeID"
    get:
      summary: Get Route
      description: Retrieve an existing route from the database
      operationId: app.routes.get_route
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
                geometryType: LineString
        404:
          $ref: "#/components/responses/RouteNotFound"
    post:
      operationId: app.routes.walking_route
      summary: Make walking route
      description: Make a walking route from the specified location to another route or vice versa
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  $ref: "#/components/schemas/Position"
                user_id:
                  $ref: "#/components/schemas/UUID"
                to_or_from:
                  type: string
                  description: From or to the specified `route`
                  enum:
                    - to
                    - from
              required:
                - position
                - user_id
                - to_or_from
              additionalProperties: false
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        404:
          $ref: "#/components/responses/RouteNotFound"
    put:
      summary: Update Route
      description: Update attributes or geometry of a route
      operationId: app.routes.put_route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: Route geometry was successfully updates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
                geometryType: LineString
        204:
          description: Trip ID was successfully updated
        400:
          description: Body missing/duplicate Trip ID/invalid coordinates
        404:
          description: No such route in the database
    delete:
      summary: Delete Route
      description: Delete a route from the database
      operationId: app.routes.delete_route
      responses:
        204:
          description: The route was successfully deleted
        404:
          description: No such route in the database
  "/routes/{route_id}/remainder":
    get:
      summary: Remainder
      description: Get the currently remaining route part
      operationId: app.routes.get_remainder
      parameters:
        - $ref: "#/components/parameters/routeID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
                geometryType: LineString
        404:
          $ref: "#/components/responses/RouteNotFound"
    post:
      summary: Remainder
      description: Crop the route to driver's current position and save this remainder to the DB
      operationId: app.routes.post_remainder
      parameters:
        - $ref: "#/components/parameters/routeID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  $ref: "#/components/schemas/Position"
              required:
                - position
              additionalProperties: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
                geometryType: LineString
        404:
          $ref: "#/components/responses/RouteNotFound"
  "/routes/{route_id}/candidates":
    post:
      summary: Find suitable passengers or drivers
      description: |
        This endpoint first filters, then sorts the canidate routes based on their proximity to route `route_id`.
        Sorting is ascending, i.e. the best candidate comes first.
      operationId: app.routes.get_candidates
      parameters:
        - $ref: "#/components/parameters/routeID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                candidate_route_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - candidate_route_ids
              additionalProperties: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UUID"
        404:
          $ref: "#/components/responses/RouteNotFound"
  "/routes/{route_id}/suggest_pickup":
    get:
      summary: Suggest a pick-up point
      description: |
        Returns the nearest position on the driver's route which is reachable by foot from `position`
      operationId: app.routes.suggest_pickup
      parameters:
        - $ref: "#/components/parameters/routeID"
        - $ref: "#/components/parameters/LatLon"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  nearest_point:
                    $ref: "#/components/schemas/Feature"
                    geometryType: Point
                  stops:
                    $ref: "#/components/schemas/FeatureCollection"
                    geometryType: Point
        404:
          $ref: "#/components/responses/RouteNotFound"
  "/routes/{route_id}/pickup":
    parameters:
      - $ref: "#/components/parameters/routeID"
    get:
      summary: Get pick-up point
      description: Retrieve a pick-up point from the database using its route's ID
      operationId: app.routes.get_pickup_point
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Position"
        204:
          description: The route has no pick-up point
        404:
          $ref: "#/components/responses/RouteNotFound"
    post:
      summary: Save a pick-up point
      description: Save a passenger pick-up point with a reference to their route
      operationId: app.routes.post_pickup_point
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  $ref: "#/components/schemas/Position"
              required:
                - position
              additionalProperties: false
            examples:
              Save a point:
                summary: Save a pick-up point in the database
                externalValue: "https://drive-and-go.postman.co/workspace/20b6cba3-160c-4b6b-8daa-fcbc83b74000/example/5899615-d7af0b13-0333-4e46-945e-82ac75ae7b98"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UUID"
    delete:
      summary: Delete Pick-Up Point
      description: Delete a pick-up point from a passenger's route
      operationId: app.routes.delete_pickup_point
      responses:
        204:
          description: Success
        404:
          description: Either route not found or it has no point
  "/routes/{route_id}/dropoff":
    parameters:
      - $ref: "#/components/parameters/routeID"
    get:
      summary: Get drop-off point
      description: Retrieve a drop-off point from the database using its route's ID
      operationId: app.routes.get_dropoff_point
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Position"
        204:
          description: The route has no drop-off point
        404:
          $ref: "#/components/responses/RouteNotFound"
    post:
      summary: Save a drop-off point
      description: Save a passenger drop-off point with a reference to their route
      operationId: app.routes.post_dropoff_point
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  $ref: "#/components/schemas/Position"
              required:
                - position
              additionalProperties: false
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UUID"
  "/routes/{route_id}/{point}":
    parameters:
      - $ref: "#/components/parameters/routeID"
      - name: point
        in: path
        required: true
        schema:
          type: string
          enum:
            - start
            - finish
    get:
      summary: Get start or finish
      description: Retrieve the first or last point of a route using it's ID
      operationId: app.routes.get_route_start_or_finish
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Position"
        404:
          $ref: "#/components/responses/RouteNotFound"
  "/routes/{route_id}/is_passenger_arrived":
    parameters:
      - $ref: "#/components/parameters/routeID"
      - $ref: "#/components/parameters/LatLon"
    get:
      summary: Is Passenger Arrived
      description: |
        Check whether the passenger with the given route has arrived.
        A passenger is considered to have arrived if the distance between the supplied driver's position
        and the passenger walking route is less than {{config.DROPOFF_RADIUS}}
      operationId: app.routes.is_passenger_arrived
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        404:
          $ref: "#/components/responses/RouteNotFound"
  "/suggest":
    get:
      summary: Suggest/Auto-complete
      description: Find addresses or POIs that (partially) match the text
      operationId: app.routes.suggest
      parameters:
        - $ref: "#/components/parameters/Text"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureCollection"
                geometryType: Point
        400:
          description: "Please, specify what to search for"
        404:
          description: "Nothing found; try a different text"
  "/geocode":
    get:
      summary: Geocoding
      description: Get coordinates of an address identified by text
      operationId: app.routes.geocode
      parameters:
        - $ref: "#/components/parameters/Text"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feature"
        400:
          description: Bad request
        404:
          description: Nothing found; try a different text
  "/reverse":
    get:
      summary: Reverse Geocoding
      description: Get an address or POI at position
      operationId: app.routes.reverse_geocode
      parameters:
        - $ref: "#/components/parameters/LatLon"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  label:
                    type: string
                  country:
                    type: string
                  county:
                    type: string
                  street:
                    type: string
                  housenumber:
                    type: string
        400:
          description: "`position` must a valid lat,lon string"
        404:
          description: Nothing found at the given location
components:
  schemas:
    UUID:
      type: string
      format: uuid
      pattern: "^[a-fA-F0-9]{8}-?[a-fA-F0-9]{4}-?4[a-fA-F0-9]{3}-?[89ab][a-fA-F0-9]{3}-?[a-fA-F0-9]{12}$"
    ServiceStateString:
      type: string
      enum:
        - ok
        - unavailable
    GeoJsonObject:
      description: Base GeoJSON object
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3"
      type: object
      properties:
        "type":
          type: string
          enum:
            - Feature
            - FeatureCollection
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
            - GeometryCollection
      required:
        - type
      discriminator:
        propertyName: type
    Geometry:
      description: Abstract type for all GeoJSON objects except Feature and FeatureCollection
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3"
      allOf:
        - $ref: "#/components/schemas/GeoJsonObject"
        - type: object
          properties:
            "type":
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
                - GeometryCollection
          required:
            - type
          discriminator:
            propertyName: type
    GeometryElement:
      description: Abstract type for all GeoJSON 'Geometry' objects except GeometryCollection
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3"
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - type: object
          properties:
            "type":
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
          required:
            - type
          discriminator:
            propertyName: type
    Feature:
      description: GeoJSON Feature object
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.2"
      allOf:
        - $ref: "#/components/schemas/GeoJsonObject"
        - type: object
          required:
            - geometry
            - properties
          properties:
            "geometry":
              allOf:
                - nullable: true
                - $ref: "#/components/schemas/Geometry"
            "properties":
              type: object
              nullable: true
            "id":
              oneOf:
                - type: number
                - type: string
    FeatureCollection:
      description: GeoJSon 'FeatureCollection' object
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.3"
      allOf:
        - $ref: "#/components/schemas/GeoJsonObject"
        - type: object
          required:
            - features
          properties:
            "features":
              type: array
              items:
                $ref: "#/components/schemas/Feature"
    Position:
      description: A [lat, lon] array (in this order because it comes from the GPS).
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.1"
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        minimum: -90
        maximum: 180
      example: [55.5, 37.5432]
    LineStringCoordinates:
      description: GeoJSON fundamental geometry construct, array of two or more positions.
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.4"
      type: array
      items:
        $ref: "#/components/schemas/Position"
      minItems: 2
    LinearRing:
      description: >
        A linear ring is a closed LineString with four or more positions.

        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.6"
      type: array
      items:
        $ref: "#/components/schemas/Position"
      minItems: 4
    Point:
      description: GeoJSon geometry
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.2"
      allOf:
        - $ref: "#/components/schemas/GeometryElement"
        - type: object
          required:
            - type
            - coordinates
          properties:
            "type":
              type: "string"
              enum: [Point]
            "coordinates":
              $ref: "#/components/schemas/Position"
    MultiPoint:
      description: GeoJSon geometry
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.3"
      allOf:
        - $ref: "#/components/schemas/GeometryElement"
        - type: object
          required:
            - coordinates
          properties:
            "coordinates":
              type: array
              items:
                $ref: "#/components/schemas/Position"
    LineString:
      description: GeoJSon geometry
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.4"
      allOf:
        - $ref: "#/components/schemas/GeometryElement"
        - type: object
          required:
            - coordinates
          properties:
            "coordinates":
              $ref: "#/components/schemas/LineStringCoordinates"
    MultiLineString:
      description: GeoJSon geometry
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.5"
      allOf:
        - $ref: "#/components/schemas/GeometryElement"
        - type: object
          required:
            - coordinates
          properties:
            "coordinates":
              type: array
              items:
                $ref: "#/components/schemas/LineStringCoordinates"
    Polygon:
      description: GeoJSon geometry
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.6"
      allOf:
        - $ref: "#/components/schemas/GeometryElement"
        - type: object
          required:
            - coordinates
          properties:
            "coordinates":
              type: array
              items:
                $ref: "#/components/schemas/LinearRing"
    MultiPolygon:
      description: GeoJSon geometry
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.7"
      allOf:
        - $ref: "#/components/schemas/GeometryElement"
        - type: object
          required:
            - coordinates
          properties:
            "coordinates":
              type: array
              items:
                type: array
                items:
                  $ref: "#/components/schemas/LinearRing"
    GeometryCollection:
      type: object
      description: >
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.1.8"
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - type: object
          required:
            - geometries
          properties:
            "geometries":
              type: array
              items:
                $ref: "#/components/schemas/GeometryElement"
              minItems: 0
  parameters:
    routeID:
      name: route_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    Text:
      name: text
      in: query
      required: true
      schema:
        type: string
        minLength: 2
    LatLon:
      name: position
      in: query
      description: A lat,lon string (may contain a space after the comma)
      required: true
      schema:
        type: string
        format: latlon
        pattern: '^\s*-?\d{1,2}(\.\d+)?,\s?-?\d{1,3}(\.\d+)?\s*$'
      example: "55.532,37.3433"
  responses:
    RouteNotFound:
      description: "No such route in the database :-("
  # securitySchemes:
  #   BasicAuth:
  #     type: http
  #     scheme: basic
# security:
#   - BasicAuth: []
